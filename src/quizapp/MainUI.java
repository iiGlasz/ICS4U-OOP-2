package quizapp;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.SwingUtilities;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author nengj
 */
public class MainUI extends javax.swing.JFrame {

    // current question being shown
    private Question currentQuestion;

    // current user playing
    private User currentUser;

    // question lists by difficulty
    private final ArrayList<Question> easyQuestions = new ArrayList<>();
    private final ArrayList<Question> mediumQuestions = new ArrayList<>();
    private final ArrayList<Question> hardQuestions = new ArrayList<>();

    // leaderboard handler
    private final Leaderboard leaderboardObj = new Leaderboard("leaderboard.txt");

    /**
     * initializes UI and loads questions
     */
    public MainUI() {
        initComponents();
        loadQuestionsFromFile(); // load from txt
        showNextQuestion();      // show first question
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        buttonA = new javax.swing.JButton();
        buttonC = new javax.swing.JButton();
        buttonD = new javax.swing.JButton();
        buttonB = new javax.swing.JButton();
        ansB = new javax.swing.JLabel();
        ansD = new javax.swing.JLabel();
        ansC = new javax.swing.JLabel();
        skip = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        ansA1 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        difficulty = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        question = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        leaderboard = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        feedback = new javax.swing.JTextArea();
        multipleAnswer = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1092, 818));
        getContentPane().setLayout(null);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel3.setText("Feedback:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(70, 536, 138, 32);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel4.setText("Username:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(666, 81, 149, 51);

        buttonA.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        buttonA.setText("a)");
        buttonA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAActionPerformed(evt);
            }
        });
        getContentPane().add(buttonA);
        buttonA.setBounds(70, 104, 72, 39);

        buttonC.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        buttonC.setText("c)");
        buttonC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCActionPerformed(evt);
            }
        });
        getContentPane().add(buttonC);
        buttonC.setBounds(70, 218, 72, 39);

        buttonD.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        buttonD.setText("d)");
        buttonD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDActionPerformed(evt);
            }
        });
        getContentPane().add(buttonD);
        buttonD.setBounds(70, 275, 72, 39);

        buttonB.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        buttonB.setText("b)");
        buttonB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBActionPerformed(evt);
            }
        });
        getContentPane().add(buttonB);
        buttonB.setBounds(70, 161, 72, 39);

        ansB.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        ansB.setText("Answer B");
        getContentPane().add(ansB);
        ansB.setBounds(160, 161, 830, 39);

        ansD.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        ansD.setText("Answer D");
        getContentPane().add(ansD);
        ansD.setBounds(160, 275, 840, 39);

        ansC.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        ansC.setText("Answer C");
        getContentPane().add(ansC);
        ansC.setBounds(160, 218, 830, 39);

        skip.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        skip.setText("Next");
        skip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skipActionPerformed(evt);
            }
        });
        getContentPane().add(skip);
        skip.setBounds(212, 439, 158, 39);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel5.setText("Leaderboard");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(563, 527, 280, 51);

        ansA1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        ansA1.setText("Answer A");
        getContentPane().add(ansA1);
        ansA1.setBounds(160, 110, 810, 39);

        username.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        username.setText("Enter User");
        username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameActionPerformed(evt);
            }
        });
        getContentPane().add(username);
        username.setBounds(827, 87, 180, 38);

        difficulty.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        difficulty.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Easy", "Medium", "Hard" }));
        difficulty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                difficultyActionPerformed(evt);
            }
        });
        getContentPane().add(difficulty);
        difficulty.setBounds(666, 25, 231, 38);

        question.setColumns(20);
        question.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        question.setLineWrap(true);
        question.setRows(5);
        question.setText("Question:");
        jScrollPane1.setViewportView(question);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(70, 25, 535, 73);

        leaderboard.setColumns(20);
        leaderboard.setLineWrap(true);
        leaderboard.setRows(5);
        jScrollPane2.setViewportView(leaderboard);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(563, 606, 463, 169);

        feedback.setColumns(20);
        feedback.setLineWrap(true);
        feedback.setRows(5);
        jScrollPane3.setViewportView(feedback);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(80, 606, 463, 169);

        multipleAnswer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ab", "ac", "ad", "bc", "bd", "cd", "abc", "abd", "acd", "bcd", "abcd" }));
        multipleAnswer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multipleAnswerActionPerformed(evt);
            }
        });
        getContentPane().add(multipleAnswer);
        multipleAnswer.setBounds(240, 340, 100, 30);

        jLabel1.setText("Multiply Select Answers:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(80, 340, 150, 30);

        jButton1.setText("Submit Choices");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(350, 340, 140, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAActionPerformed
        if (!(currentQuestion instanceof MultipleSelect))
            handleAnswer("a");
    }//GEN-LAST:event_buttonAActionPerformed

    private void buttonCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCActionPerformed
        if (!(currentQuestion instanceof MultipleSelect))
            handleAnswer("c");
    }//GEN-LAST:event_buttonCActionPerformed

    private void buttonDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDActionPerformed
        if (!(currentQuestion instanceof MultipleSelect))
            handleAnswer("d");
    }//GEN-LAST:event_buttonDActionPerformed

    private void buttonBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBActionPerformed
        if (!(currentQuestion instanceof MultipleSelect))
            handleAnswer("b");
    }//GEN-LAST:event_buttonBActionPerformed

    private void skipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipActionPerformed
        feedback.setText("Question skipped.");
        showNextQuestion();
    }//GEN-LAST:event_skipActionPerformed

    private void usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameActionPerformed

    private void difficultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_difficultyActionPerformed
        showNextQuestion();
    }//GEN-LAST:event_difficultyActionPerformed

    private void multipleAnswerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multipleAnswerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_multipleAnswerActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (currentQuestion instanceof MultipleSelect){
            String multipleSelectAnswer = (String) multipleAnswer.getSelectedItem();
            handleAnswer(multipleSelectAnswer);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
     /**
     * loads questions from file and sorts by type + difficulty
     */
    private void loadQuestionsFromFile() {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(
                getClass().getResourceAsStream("/quizapp/questions.txt")))) {

            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split("\\|");
                if (parts.length != 6) continue;

                String level = parts[0];
                String qText = parts[1];
                String[] answers = parts[2].split(";");
                String correct = parts[3];
                String feedbackText = parts[4];
                String questionType = parts[5];

                // create question by type
                Question q = switch (questionType) {
                    case "MC" -> new MultipleChoice(qText, answers, correct, feedbackText);
                    case "TF" -> new TrueFalse(qText, answers, correct, feedbackText);
                    case "MS" -> new MultipleSelect(qText, answers, correct, feedbackText);
                    default -> throw new IllegalArgumentException("Unknown type: " + questionType);
                };

                // sort into difficulty list
                switch (level) {
                    case "Easy" -> easyQuestions.add(q);
                    case "Medium" -> mediumQuestions.add(q);
                    case "Hard" -> hardQuestions.add(q);
                }
            }
        } catch (Exception e) {
            question.setText("Could not load questions.");
            e.printStackTrace();
        }
    }

    /**
     * handles the user answer, updates score, feedback, and leaderboard
     *
     * @param choice user's answer
     */
    private void handleAnswer(String choice) {
        if (currentQuestion == null) return;

        String name = username.getText().trim();
        if (name.isEmpty()) name = "___";

        // create user if new
        if (currentUser == null) currentUser = new User(0, name);

        // get difficulty setting
        String selectedDifficulty = (String) difficulty.getSelectedItem();
        Difficulty diff = switch (selectedDifficulty) {
            case "Easy" -> new Difficulty("Easy", 1.0);
            case "Medium" -> new Difficulty("Medium", 1.5);
            case "Hard" -> new Difficulty("Hard", 2.0);
            default -> new Difficulty("Easy", 1.0);
        };

        // check answer
        boolean correct = currentQuestion.isCorrect(choice);
        if (correct) {
            int score = (int) currentQuestion.calculateScore(choice, diff);
            currentUser.incrementScore(score);
            leaderboardObj.addUser(currentUser);
        }

        feedback.setText("Feedback: " + currentQuestion.getFeedback());
        leaderboard.setText(leaderboardObj.getFormattedTopUsers());
        leaderboard.setCaretPosition(0);

        showNextQuestion(); // load next
    }

    /**
     * displays the next question based on difficulty
     */
    private void showNextQuestion() {
        String level = (String) difficulty.getSelectedItem();

        // get next question by level
        if (level.equals("Easy") && !easyQuestions.isEmpty()) {
            currentQuestion = easyQuestions.remove(0);
        } else if (level.equals("Medium") && !mediumQuestions.isEmpty()) {
            currentQuestion = mediumQuestions.remove(0);
        } else if (level.equals("Hard") && !hardQuestions.isEmpty()) {
            currentQuestion = hardQuestions.remove(0);
        } else {
            question.setText("No more questions in this category.");
            ansA1.setText(""); ansB.setText(""); ansC.setText(""); ansD.setText("");
            return;
        }

        // update UI
        question.setText("Question: " + currentQuestion.getQuestionText());
        String[] answers = currentQuestion.getAnswers();
        ansA1.setText("a) " + answers[0]);
        ansB.setText("b) " + answers[1]);
        ansC.setText("c) " + answers[2]);
        ansD.setText("d) " + answers[3]);
    }

    /**
     * main method to run the quiz UI
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> new MainUI().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ansA1;
    private javax.swing.JLabel ansB;
    private javax.swing.JLabel ansC;
    private javax.swing.JLabel ansD;
    private javax.swing.JButton buttonA;
    private javax.swing.JButton buttonB;
    private javax.swing.JButton buttonC;
    private javax.swing.JButton buttonD;
    private javax.swing.JComboBox<String> difficulty;
    private javax.swing.JTextArea feedback;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea leaderboard;
    private javax.swing.JComboBox<String> multipleAnswer;
    private javax.swing.JTextArea question;
    private javax.swing.JButton skip;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}
